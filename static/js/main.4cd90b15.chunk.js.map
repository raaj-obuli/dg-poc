{"version":3,"sources":["components/LazyLoadImage.js","components/Moviecard.js","reducer.js","store.js","actions/actionTypes.js","fetch.js","actions/actions.js","components/Search.js","components/Header.js","components/Movielist.js","App.js","serviceWorker.js","index.js"],"names":["LazilyLoadedImage","src","alt","className","effect","Moviecard","props","posterPath","poster","name","initialState","movielist","pageSizeReturned","hasMore","pageNo","totalContentItems","title","search","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","state","action","type","concat","payload","applyMiddleware","thunk","fetchMovies","page","dispatch","fetch","then","response","json","data","setTimeout","parseInt","movieList","content","getMovieList","catch","err","console","log","Search","this","value","id","placeholder","onChange","e","target","onBlur","process","Component","connect","key","getSearch","fetchSearch","Header","Movielist","loadMore","filterMovies","filter","movie","toLowerCase","includes","pageStart","initialLoad","loader","style","textAlign","map","item","i","React","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4cd90b15.chunk.js","sourcesContent":["import React from 'react';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\nconst LazilyLoadedImage = ({ src, alt }) => (\n  <div className='xl:h-64 xl:overflow-hidden'>\n    <LazyLoadImage alt={alt} src={src} effect='blur' />\n  </div>\n);\n\nexport default LazilyLoadedImage;\n","import React from 'react';\nimport LazilyLoadedImage from './LazyLoadImage';\nimport 'react-lazy-load-image-component/src/effects/blur.css';\n\nfunction Moviecard(props) {\n  const placeholderPosterPath = './images/placeholder_for_missing_posters.png';\n  const posterPath = `./images/${props.poster}`;\n  const poster =\n    props.poster && props.poster !== 'posterthatismissing.jpg'\n      ? posterPath\n      : placeholderPosterPath;\n\n  return (\n    <div className='movielist__wrapper'>\n      <LazilyLoadedImage src={poster} alt={props.name} />\n      <img className='pb-2' alt='' />\n      <h4 className='text-sm'>{props.name}</h4>\n    </div>\n  );\n}\n\nexport default Moviecard;\n","import * as actions from './actions/actionTypes';\n\nconst initialState = {\n  movielist: [],\n  pageSizeReturned: null,\n  hasMore: true,\n  pageNo: 0,\n  totalContentItems: null,\n  title: '',\n  search: '',\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case actions.GET_MOVIE_LIST:\n      return {\n        ...state,\n        movielist: state.movielist.concat(action.payload),\n        pageSizeReturned: state.pageSizeReturned + action.pageSizeReturned,\n        totalContentItems: action.totalContentItems,\n        hasMore:\n          action.totalContentItems -\n          (state.pageSizeReturned + action.pageSizeReturned)\n            ? true\n            : false,\n        pageNo: action.pageNo,\n        title: action.title,\n      };\n    case actions.SEARCH:\n      return { ...state, search: action.search };\n    default:\n      return state;\n  }\n}\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport reducer from './reducer';\nimport thunk from 'redux-thunk';\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, composeEnhancer(applyMiddleware(thunk)));\n\nexport default store;\n","export const GET_MOVIE_LIST = 'GET_MOVIE_LIST';\nexport const SEARCH = 'SEARCH';\n","import { getMovieList, getSearch } from './actions/actions';\nimport store from './store';\n\nexport function fetchMovies(page) {\n  return (dispatch) => {\n    fetch(`./data/${page}.json`)\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        setTimeout(() => {\n          store.dispatch(getMovieList(data.page));\n        }, 300); //faking a loading time\n      })\n      .catch((err) => {\n        console.log('Error Reading data ' + err);\n      });\n  };\n}\n\nexport function fetchSearch(key) {\n  return store.dispatch(getSearch(key));\n}\n","import * as actions from './actionTypes';\n\nexport function getMovieList(data) {\n  const totalContentItems = parseInt(data['total-content-items']);\n  const pageSizeReturned = parseInt(data['page-size-returned']);\n  const movieList = data['content-items'].content;\n  const pageNo = parseInt(data['page-num-requested']);\n\n  return {\n    type: actions.GET_MOVIE_LIST,\n    title: data.title,\n    payload: movieList,\n    totalContentItems: totalContentItems,\n    pageSizeReturned: pageSizeReturned,\n    pageNo: pageNo,\n  };\n}\n\nexport function getSearch(key) {\n  return {\n    type: actions.SEARCH,\n    search: key,\n  };\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchSearch } from '../fetch';\nimport './Search.css';\n\nclass Search extends Component {\n  render() {\n    const { search, value } = this.props;\n\n    return (\n      <div className='searchBox flex-1 text-right text-gray-600 relative'>\n        <div className='flex'>\n          <div className='flex-1 '>\n            <input\n              id='search'\n              name='search'\n              type='text'\n              placeholder='search'\n              onChange={(e) => search(e.target.value)}\n              value={value}\n              className='focus:outline-none'\n              onBlur={() => search('')}\n            />\n          </div>\n          <div className='flex-1 '>\n            <img\n              src={process.env.PUBLIC_URL + '/images/search.png'}\n              alt=''\n              className='searchIcon'\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    search: state.search,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    search: (key) => dispatch(fetchSearch(key)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\n","import React from 'react';\nimport Search from './Search';\nexport default function Header(props) {\n  return (\n    <div className='flex'>\n      <div className='flex-1 pt-2 text-lg'>\n        <h1>{props.title}</h1>\n      </div>\n      <Search />\n    </div>\n  );\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Moviecard from './Moviecard';\nimport { fetchMovies } from '../fetch';\nimport InfiniteScroll from 'react-infinite-scroller';\n\nimport Header from './Header';\n\nclass Movielist extends React.Component {\n  loadMore = () => {\n    return this.props.hasMore ? true : false;\n  };\n\n  filterMovies = () => {\n    let filteredMovies = this.props.movielist.filter((movie) =>\n      movie.name.toLowerCase().includes(this.props.search.toLowerCase())\n    );\n    return filteredMovies;\n  };\n\n  render() {\n    return (\n      <div className='movielist pb-16'>\n        <div className='sticky top-0 pb-4 pt-6 bg-black z-10'>\n          <Header title={this.props.title} search={this.props.search} />\n        </div>\n        <InfiniteScroll\n          pageStart={0}\n          loadMore={this.props.fetch}\n          initialLoad={true}\n          hasMore={this.loadMore()}\n          loader={\n            <div className='loader' key={0} style={{ textAlign: 'center' }}>\n              <img\n                className='m-auto mt-16'\n                src='https://cdn.themis-media.com/media/global/images/library/deriv/1291/1291107.gif'\n                alt='Loading ...'\n              />\n            </div>\n          }\n        >\n          <div className='grid grid-cols-3 sm:grid-cols-3 md:grid-cols-6 lg:grid-cols-6 xl:grid-cols-6 gap-4 gap-y-10'>\n            {this.props.search\n              ? this.filterMovies().map((item, i) => (\n                  <Moviecard\n                    key={i}\n                    name={item.name}\n                    poster={item['poster-image']}\n                  />\n                ))\n              : this.props.movielist.map((item, i) => (\n                  <Moviecard\n                    key={i}\n                    name={item.name}\n                    poster={item['poster-image']}\n                  />\n                ))}\n          </div>\n        </InfiniteScroll>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    movielist: state.movielist,\n    pageSizeReturned: state.pageSizeReturned,\n    hasMore: state.hasMore,\n    pageNo: state.pageNo,\n    title: state.title,\n    search: state.search,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetch: (page) => dispatch(fetchMovies(page)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Movielist);\n","import React from 'react';\nimport './App.css';\nimport Movielist from './components/Movielist';\n\nfunction App() {\n  return (\n    <div className='container items-center justify-center bg-black text-white pr-4 pl-4 pb-4\"'>\n      <Movielist />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}